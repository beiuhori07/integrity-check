name: Manual Container deployment

on:
  workflow_dispatch:
  
jobs:
  build:
    runs-on: ubuntu-latest


    steps:
    - uses: actions/checkout@v2

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Extract values from JSON
      run: |
          echo "vmType=$(jq -r '.vmType' config.json)" >> $GITHUB_ENV
          echo "contractAddress=$(jq -r '.contractAddress' config.json)" >> $GITHUB_ENV
          echo "metricsAddress=$(jq -r '.metricsAddress' config.json)" >> $GITHUB_ENV
          echo "port=$(jq -r '.port' config.json)" >> $GITHUB_ENV
          

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin' # Temurin is the Eclipse Foundation's OpenJDK distribution

    - name: Grant execute permission for gradlew
      run: |
        chmod +x ./gradlew


    - name: Download dependencies
      run: |
        ./gradlew --no-daemon --quiet dependencies

    - name: Fetch and build dependency hash map in JSON format
      run: |
        echo "Downloaded dependencies and their hashes:"
        files=$(find ~/.gradle/caches/modules-2/files-2.1 -type f -name '*.jar')
        echo "{" > deps_hashes.json
        echo -e "\t\"contractAddress\": \"${contractAddress}\"," >> deps_hashes.json
        echo -e "\t\"depsHashesMap\": {" >> deps_hashes.json
        for file in $files; do
          hash=$(sha256sum "$file" | cut -d " " -f1)
          filename=$(basename "$file")
          echo -e "\t\t\"$filename\": \"$hash\"," >> deps_hashes.json
        done
        # Remove the last comma and close the JSON array
        sed -i '$ s/,$//' deps_hashes.json
        echo -e "\t}" >> deps_hashes.json
        echo "}" >> deps_hashes.json


    - name: Make HTTP GET request with curl - to esm, for dependency check
      run: |
          BASE_URL="https://63b5e9a76ada208d08eb733c6682f603.serveo.net/blockchain/dependency-check"
          PARAMS=""

          RESPONSE=$(curl -s -o response.json -w "%{http_code}" -X POST -H "Content-Type: application/json" -d @deps_hashes.json "${BASE_URL}${PARAMS}")

          if [[ ${RESPONSE} -ge 400 ]]; then
            echo "HTTP error occurred: ${RESPONSE}"
            cat response.json
            exit 1  # Exit with a non-zero status to fail the CI/CD pipeline
          fi

          echo "Success: ${RESPONSE}"


    - name: Build with Gradle
      run: |
        ./gradlew build -x test

    - name: Test with Gradle
      run: |
        ./gradlew test

    - name: Log in to DockerHub
      uses: docker/login-action@v1
      with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
          context: .
          file: ./Dockerfile
          push: true
          tags: beiuhori07/integrity-check:latest

    - name: Make HTTP GET request with curl - to esm, for deployment
      run: |
          echo 'entered depeloy step' 
          BASE_URL="https://2b934df765214b997aad8d13c6c8e5d7.serveo.net/deploy"
          PARAMS="?vmType=container&repoUrl=https://github.com/$GITHUB_REPOSITORY.git&lastCommitHash=${GITHUB_SHA::10}&redeployment=false&metricsAddress=${metricsAddress}&port=${port}&geolocation=romania"

          echo 'right before curl'
          RESPONSE=$(curl -s -o response.json -w "%{http_code}" "${BASE_URL}${PARAMS}")
          echo 'right after curl'

          if [[ ${RESPONSE} -ge 400 ]]; then
            echo "HTTP error occurred: ${RESPONSE}"
            cat response.json
            exit 1  # Exit with a non-zero status to fail the CI/CD pipeline
          fi

          echo "Success: ${RESPONSE}"
